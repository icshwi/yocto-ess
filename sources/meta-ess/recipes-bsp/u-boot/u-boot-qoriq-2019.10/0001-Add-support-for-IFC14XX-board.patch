From 401ec3d68e9131cddc3913619c392e1c97874fad Mon Sep 17 00:00:00 2001
From: Oliver Talevski <oliver.talevski@esss.se>
Date: Tue, 18 Dec 2018 08:57:14 +0100
Subject: [PATCH] Add support for IFC14XX board

---
 arch/powerpc/cpu/mpc85xx/Kconfig          |   7 +
 arch/powerpc/include/asm/config_mpc85xx.h |   1 +
 board/freescale/common/vid.c              |  76 +-
 cmd/Makefile                              |   3 +
 cmd/prom.c                                | 847 ++++++++++++++++++++++
 drivers/ddr/fsl/ctrl_regs.c               |  38 +
 drivers/ddr/fsl/main.c                    | 117 +++
 drivers/net/fm/eth.c                      |   2 +
 env/flash.c                               |  62 ++
 scripts/check-config.sh                   |   1 -
 10 files changed, 1146 insertions(+), 8 deletions(-)
 create mode 100644 cmd/prom.c

diff --git a/arch/powerpc/cpu/mpc85xx/Kconfig b/arch/powerpc/cpu/mpc85xx/Kconfig
index eb815d3164..ffe1adb1ee 100644
--- a/arch/powerpc/cpu/mpc85xx/Kconfig
+++ b/arch/powerpc/cpu/mpc85xx/Kconfig
@@ -344,6 +344,12 @@ config TARGET_T1042RDB_PI
 	imply CMD_SATA
 	imply PANIC_HANG
 
+config TARGET_IFC14XX
+	bool "Support IFC14XX"
+	select ARCH_T2081
+	select SUPPORT_SPL
+	select PHYS_64BIT
+
 config TARGET_T2080QDS
 	bool "Support T2080QDS"
 	select ARCH_T2080
@@ -1613,6 +1619,7 @@ source "board/freescale/t102xqds/Kconfig"
 source "board/freescale/t102xrdb/Kconfig"
 source "board/freescale/t1040qds/Kconfig"
 source "board/freescale/t104xrdb/Kconfig"
+source "board/freescale/ifc14xx/Kconfig"
 source "board/freescale/t208xqds/Kconfig"
 source "board/freescale/t208xrdb/Kconfig"
 source "board/freescale/t4qds/Kconfig"
diff --git a/arch/powerpc/include/asm/config_mpc85xx.h b/arch/powerpc/include/asm/config_mpc85xx.h
index 946e74a93b..b503e6b6ed 100644
--- a/arch/powerpc/include/asm/config_mpc85xx.h
+++ b/arch/powerpc/include/asm/config_mpc85xx.h
@@ -386,6 +386,7 @@
 #define CONFIG_SYS_FSL_CLUSTER_CLOCKS	{ 1, 4, 4, 4 }
 #define CONFIG_SYS_FSL_SRDS_1
 #define CONFIG_SYS_FSL_PCI_VER_3_X
+#define CONFIG_NUM_DDR_CONTROLLERS	1
 #if defined(CONFIG_ARCH_T2080)
 #define CONFIG_SYS_NUM_FM1_DTSEC	8
 #define CONFIG_SYS_NUM_FM1_10GEC	4
diff --git a/board/freescale/common/vid.c b/board/freescale/common/vid.c
index b37f3bf4f8..80879c18c4 100644
--- a/board/freescale/common/vid.c
+++ b/board/freescale/common/vid.c
@@ -84,6 +84,13 @@ static int find_ir_chip_on_i2c(void)
 	return -1;
 }
 #endif
+#if defined(CONFIG_VOL_MONITOR_BMR463_SET) || \
+	defined(CONFIG_VOL_MONITOR_BMR463_READ)
+static int find_ir_chip_on_i2c(void)
+{
+	return(CONFIG_BMR463_I2C_ADDR_2);
+}
+#endif
 
 /* Maximum loop count waiting for new voltage to take effect */
 #define MAX_LOOP_WAIT_NEW_VOL		100
@@ -248,6 +255,23 @@ static int read_voltage_from_LTC(int i2caddress)
 }
 #endif
 
+#ifdef CONFIG_VOL_MONITOR_BMR463_READ
+static int read_voltage_from_BMR(int i2caddress)
+{
+	uint8_t i2c_data[2];
+	int old_bus;
+	int hw_vdd = 1025;
+
+	old_bus = i2c_get_bus_num();
+	i2c_set_bus_num(CONFIG_BMR463_I2C_BUS);
+	i2c_read( (uint8_t)i2caddress, 0x8b, 1, i2c_data, 2);
+	i2c_set_bus_num(old_bus);
+	hw_vdd = (int)((i2c_data[1]<<8) | i2c_data[0]);
+	hw_vdd =  (hw_vdd*1000)/(1<<13);
+	return(hw_vdd);
+}
+#endif
+
 static int read_voltage(int i2caddress)
 {
 	int voltage_read;
@@ -257,6 +281,8 @@ static int read_voltage(int i2caddress)
 	voltage_read = read_voltage_from_IR(i2caddress);
 #elif defined CONFIG_VOL_MONITOR_LTC3882_READ
 	voltage_read = read_voltage_from_LTC(i2caddress);
+#elif defined CONFIG_VOL_MONITOR_BMR463_READ
+	voltage_read = read_voltage_from_BMR(i2caddress);
 #else
 	return -1;
 #endif
@@ -418,6 +444,19 @@ static int set_voltage_to_LTC(int i2caddress, int vdd)
 }
 #endif
 
+#ifdef CONFIG_VOL_MONITOR_BMR463_SET
+/* Set the voltage to the IR chip */
+static int set_voltage_to_BMR(int i2caddress, int vdd)
+{
+	int vdd_last;
+	printf("VID: set voltage to BMR at %d mV\n", vdd);
+
+	vdd_last = read_voltage(i2caddress);
+
+	return vdd_last;
+}
+#endif
+
 static int set_voltage(int i2caddress, int vdd)
 {
 	int vdd_last = -1;
@@ -426,6 +465,8 @@ static int set_voltage(int i2caddress, int vdd)
 	vdd_last = set_voltage_to_IR(i2caddress, vdd);
 #elif defined CONFIG_VOL_MONITOR_LTC3882_SET
 	vdd_last = set_voltage_to_LTC(i2caddress, vdd);
+#elif defined CONFIG_VOL_MONITOR_BMR463_SET
+	vdd_last = set_voltage_to_BMR(i2caddress, vdd);
 #else
 	#error Specific voltage monitor must be defined
 #endif
@@ -569,7 +610,9 @@ int adjust_vdd(ulong vdd_override)
 		goto exit;
 	}
 #if defined(CONFIG_VOL_MONITOR_IR36021_SET) || \
-	defined(CONFIG_VOL_MONITOR_IR36021_READ)
+	defined(CONFIG_VOL_MONITOR_IR36021_READ) || \
+	defined(CONFIG_VOL_MONITOR_BMR463_SET) || \
+	defined(CONFIG_VOL_MONITOR_BMR463_READ)
 	ret = find_ir_chip_on_i2c();
 	if (ret < 0) {
 		printf("VID: Could not find voltage regulator on I2C.\n");
@@ -577,9 +620,12 @@ int adjust_vdd(ulong vdd_override)
 		goto exit;
 	} else {
 		i2caddress = ret;
+		ret = 0;
 		debug("VID: IR Chip found on I2C address 0x%02x\n", i2caddress);
 	}
-
+#endif
+#if defined(CONFIG_VOL_MONITOR_IR36021_SET) || \
+	defined(CONFIG_VOL_MONITOR_IR36021_READ)
 	/* check IR chip work on Intel mode*/
 #ifndef CONFIG_DM_I2C
 	ret = i2c_read(i2caddress,
@@ -660,6 +706,9 @@ int adjust_vdd(ulong vdd_override)
 #ifdef CONFIG_VOL_MONITOR_LTC3882_SET
 	/* Set the target voltage */
 	vdd_last = vdd_current = set_voltage(i2caddress, vdd_target);
+#elif CONFIG_VOL_MONITOR_BMR463_SET
+	/* Set the target voltage */
+	vdd_last = set_voltage(i2caddress, vdd_target);
 #else
 	/*
 	  * Adjust voltage to at or one step above target.
@@ -751,7 +800,9 @@ int adjust_vdd(ulong vdd_override)
 		goto exit;
 	}
 #if defined(CONFIG_VOL_MONITOR_IR36021_SET) || \
-	defined(CONFIG_VOL_MONITOR_IR36021_READ)
+	defined(CONFIG_VOL_MONITOR_IR36021_READ) || \
+	defined(CONFIG_VOL_MONITOR_BMR463_SET) || \
+	defined(CONFIG_VOL_MONITOR_BMR463_READ)
 	ret = find_ir_chip_on_i2c();
 	if (ret < 0) {
 		printf("VID: Could not find voltage regulator on I2C.\n");
@@ -759,9 +810,12 @@ int adjust_vdd(ulong vdd_override)
 		goto exit;
 	} else {
 		i2caddress = ret;
+		ret = 0;
 		debug("VID: IR Chip found on I2C address 0x%02x\n", i2caddress);
 	}
-
+#endif
+#if defined(CONFIG_VOL_MONITOR_IR36021_SET) || \
+	defined(CONFIG_VOL_MONITOR_IR36021_READ)
 	/* check IR chip work on Intel mode*/
 #ifndef CONFIG_DM_I2C
 	ret = i2c_read(i2caddress,
@@ -855,6 +909,12 @@ int adjust_vdd(ulong vdd_override)
 	}
 	vdd_current = vdd_last;
 	debug("VID: Core voltage is currently at %d mV\n", vdd_last);
+
+#if defined(CONFIG_VOL_MONITOR_BMR463_SET)  || \
+    defined(CONFIG_VOL_MONITOR_BMR463_READ)
+
+	vdd_last = set_voltage(i2caddress, vdd_target);
+#else
 	/*
 	  * Adjust voltage to at or one step above target.
 	  * As measurements are less precise than setting the values
@@ -871,9 +931,9 @@ int adjust_vdd(ulong vdd_override)
 		vdd_current -= IR_VDD_STEP_DOWN;
 		vdd_last = set_voltage(i2caddress, vdd_current);
 	}
-
+#endif
 	if (vdd_last > 0)
-		printf("VID: Core voltage after adjustment is at %d mV\n",
+		debug("VID: Core voltage after adjustment is at %d mV\n",
 		       vdd_last);
 	else
 		ret = -1;
@@ -897,7 +957,9 @@ static int print_vdd(void)
 		return -1;
 	}
 #if defined(CONFIG_VOL_MONITOR_IR36021_SET) || \
-	defined(CONFIG_VOL_MONITOR_IR36021_READ)
+	defined(CONFIG_VOL_MONITOR_IR36021_READ) || \
+	defined(CONFIG_VOL_MONITOR_BMR463_SET) || \
+	defined(CONFIG_VOL_MONITOR_BMR463_READ)
 	ret = find_ir_chip_on_i2c();
 	if (ret < 0) {
 		printf("VID: Could not find voltage regulator on I2C.\n");
diff --git a/cmd/Makefile b/cmd/Makefile
index ac843b4b16..fb91a77ed9 100644
--- a/cmd/Makefile
+++ b/cmd/Makefile
@@ -62,6 +62,9 @@ obj-$(CONFIG_CMD_FDC) += fdc.o
 obj-$(CONFIG_CMD_FDT) += fdt.o
 obj-$(CONFIG_CMD_FITUPD) += fitupd.o
 obj-$(CONFIG_CMD_FLASH) += flash.o
+ifdef CONFIG_CMD_PROM
+obj-$(CONFIG_CMD_PROM) += prom.o
+endif
 obj-$(CONFIG_CMD_FPGA) += fpga.o
 obj-$(CONFIG_CMD_FPGAD) += fpgad.o
 obj-$(CONFIG_CMD_FS_GENERIC) += fs.o
diff --git a/cmd/prom.c b/cmd/prom.c
new file mode 100644
index 0000000000..93219f9d3f
--- /dev/null
+++ b/cmd/prom.c
@@ -0,0 +1,847 @@
+#include <common.h>
+#include <hwconfig.h>
+#include <command.h>
+#include <env_internal.h>
+#include <malloc.h>
+
+
+#define SFLASH_CMD_DUMMY 0xA5
+#define SFLASH_CMD_WREN  0x06
+#define SFLASH_CMD_WRDI  0x04
+#define SFLASH_CMD_REMS  0x90
+#define SFLASH_CMD_RDID  0x9f
+#define SFLASH_CMD_RDSR  0x05
+#define SFLASH_CMD_RDSR2 0x07
+#define SFLASH_CMD_RDCR  0x35
+#define SFLASH_CMD_WRSR  0x01
+#define SFLASH_CMD_READ  0x03
+#define SFLASH_CMD_4READ  0x13
+#define SFLASH_CMD_FREAD 0x0B
+#define SFLASH_CMD_PP    0x02
+#define SFLASH_CMD_4PP   0x12
+#define SFLASH_CMD_SE    0xD8
+#define SFLASH_CMD_4SE   0xDC
+#define SFLASH_CMD_BE    0xC7
+
+#define SPI_OFFSET    0x28
+#define SPI_CLK       0x01
+#define SPI_DO        0x02
+#define SPI_DI        0x04
+#define SPI_CS        0x08
+#define SPI_DEV0      0x00
+#define SPI_DEV1      0x10
+#define SPI_DEV2      0x20
+#define SPI_DEV3      0x30
+#define SPI_DEV4      0x40
+#define SPI_DEV5      0x50
+#define SPI_8BIT      0x80
+
+int spi_dev = 0;
+struct ifc_node
+{
+  int *csr_ptr;
+}
+ifc_node = {(int *)CONFIG_SYS_PON_BASE};
+
+
+void
+ifc_csr_wr( struct ifc_node *ifc,
+            int off,
+        int data)
+{
+  volatile int *p;
+
+  p = ifc->csr_ptr;
+  p[off>>2] = data;
+
+  return;
+}
+
+int
+ifc_csr_rd( struct ifc_node *ifc,
+        int off)
+{
+  volatile int *p;
+
+  p = ifc->csr_ptr;
+  return( p[off>>2]);
+}
+
+void
+spi_set_dev( uint dev)
+{
+  spi_dev = (dev & 7) << 4;
+}
+
+static void
+spi_write_io( struct ifc_node *ifc,
+          uint data)
+{
+  ifc_csr_rd( ifc, SPI_OFFSET);
+  data |=  spi_dev;
+  ifc_csr_wr( ifc, SPI_OFFSET, data);
+  ifc_csr_rd( ifc, SPI_OFFSET);
+  return;
+}
+
+static uint
+spi_read_io( struct ifc_node *ifc)
+{
+  volatile uint data;
+
+  data = ifc_csr_rd( ifc, SPI_OFFSET);
+
+  return( data);
+}
+
+void
+spi_slow_mode( struct ifc_node *ifc)
+{
+  uint data, i;
+
+  data =  SPI_CS;
+  spi_write_io( ifc, data);
+  for( i = 0; i < 4; i++)
+  {
+    data =  SPI_CLK | SPI_CS;
+    spi_write_io( ifc, data);
+    data =  SPI_CS;
+    spi_write_io( ifc, data);
+  }
+  data =  0;
+  spi_write_io( ifc, data);
+
+  return;
+}
+
+void
+spi_load_cmd( struct ifc_node *ifc,
+          uint cmd,
+          uint para)
+{
+  uint data;
+
+  switch( cmd)
+  {
+    case SFLASH_CMD_4READ:
+    case SFLASH_CMD_4PP:
+    case SFLASH_CMD_4SE:
+    {
+      data = ((cmd << 24) & 0xff000000) | SPI_CLK | SPI_CS | SPI_8BIT;
+      spi_write_io( ifc, data);
+      data = (para  & 0xff000000) | SPI_CLK | SPI_CS | SPI_8BIT;
+      spi_write_io( ifc, data);
+      data = ((para << 8) & 0xff000000) | SPI_CLK | SPI_CS | SPI_8BIT;
+      spi_write_io( ifc, data);
+      data = ((para << 16) & 0xff000000) | SPI_CLK | SPI_CS | SPI_8BIT;
+      spi_write_io( ifc, data);
+      data = ((para << 24) & 0xff000000) | SPI_CLK | SPI_CS | SPI_8BIT;
+      spi_write_io( ifc, data);
+      return;
+    }
+    case SFLASH_CMD_FREAD:
+    case SFLASH_CMD_PP:
+    case SFLASH_CMD_SE:
+    case SFLASH_CMD_REMS:
+    {
+      data = ((cmd << 24) & 0xff000000) | SPI_CLK | SPI_CS | SPI_8BIT;
+      spi_write_io( ifc, data);
+      data = ((para << 8) & 0xff000000) | SPI_CLK | SPI_CS | SPI_8BIT;
+      spi_write_io( ifc, data);
+      data = ((para << 16) & 0xff000000) | SPI_CLK | SPI_CS | SPI_8BIT;
+      spi_write_io( ifc, data);
+      data = ((para << 24) & 0xff000000) | SPI_CLK | SPI_CS | SPI_8BIT;
+      spi_write_io( ifc, data);
+      return;
+    }
+    case SFLASH_CMD_WREN:
+    case SFLASH_CMD_WRDI:
+    case SFLASH_CMD_RDID:
+    case SFLASH_CMD_RDSR:
+    case SFLASH_CMD_RDSR2:
+    case SFLASH_CMD_BE:
+    case SFLASH_CMD_DUMMY:
+    {
+      data = ((cmd << 24) & 0xff000000) | SPI_CLK | SPI_CS | SPI_8BIT;
+      spi_write_io( ifc, data);
+      return;
+    }
+    case SFLASH_CMD_WRSR:
+    {
+      if( spi_dev)
+      {
+    cmd = ( cmd << 16) | ((para & 0xff)<<8) | ((para & 0xff00)>>8);
+        data = ((cmd << 8) & 0xff000000) | SPI_CLK | SPI_CS | SPI_8BIT;
+        spi_write_io( ifc, data);
+        data = ((cmd << 16) & 0xff000000) | SPI_CLK | SPI_CS | SPI_8BIT;
+        spi_write_io( ifc, data);
+        data = ((cmd << 24) & 0xff000000) | SPI_CLK | SPI_CS | SPI_8BIT;
+        spi_write_io( ifc, data);
+      }
+      else
+      {
+    cmd = ( cmd << 8) | (para & 0xff);
+    //size = 16;
+        data = ((cmd << 16) & 0xff000000) | SPI_CLK | SPI_CS | SPI_8BIT;
+        spi_write_io( ifc, data);
+        data = ((cmd << 24) & 0xff000000) | SPI_CLK | SPI_CS | SPI_8BIT;
+        spi_write_io( ifc, data);
+      }
+      return;
+    }
+    default:
+    {
+      return;
+    }
+  }
+
+  return;
+}
+
+void
+spi_start_cmd( struct ifc_node *ifc)
+{
+  spi_write_io( ifc, SPI_CS);
+}
+
+void
+spi_end_cmd( struct ifc_node *ifc)
+{
+  spi_write_io( ifc, 0x0);
+}
+
+void
+spi_write_byte( struct ifc_node *ifc,
+        unsigned char b)
+{
+  uint data;
+
+  data = ((uint)b << 24) | SPI_CLK | SPI_CS | SPI_8BIT;
+  spi_write_io( ifc, data);
+
+  return;
+}
+
+unsigned char
+spi_read_byte( struct ifc_node *ifc)
+{
+  unsigned char b;
+  uint data;
+  spi_write_io( ifc, SPI_CLK | SPI_CS | SPI_8BIT);
+  data = spi_read_io( ifc);
+  b = (unsigned char)(data >> 24);
+  return( b);
+}
+
+void
+spi_read_ID( struct ifc_node *ifc,
+         unsigned char *data_p)
+{
+  spi_start_cmd( ifc);
+  spi_load_cmd( ifc, SFLASH_CMD_RDID, 0);
+  data_p[0] = spi_read_byte( ifc);
+  data_p[1] = spi_read_byte( ifc);
+  data_p[2] = spi_read_byte( ifc);
+  spi_end_cmd( ifc);
+  return;
+}
+
+void
+spi_read_EMS( struct ifc_node *ifc,
+          unsigned char *data_p)
+{
+  spi_start_cmd( ifc);
+  spi_load_cmd( ifc, SFLASH_CMD_REMS, 0);
+  data_p[0] = spi_read_byte( ifc);
+  data_p[1] = spi_read_byte( ifc);
+  data_p[2] = 0;
+  spi_end_cmd( ifc);
+  return;
+}
+
+
+unsigned short
+spi_read_status( struct ifc_node *ifc)
+{
+  unsigned short status;
+
+  spi_start_cmd( ifc);
+  spi_load_cmd( ifc, SFLASH_CMD_RDSR2, 0);
+  status =  (unsigned short)spi_read_byte( ifc);
+  status = (unsigned short)((status<<8)&0xff00);
+  spi_end_cmd( ifc);
+  spi_start_cmd( ifc);
+  spi_load_cmd( ifc, SFLASH_CMD_RDSR, 0);
+  status = (unsigned short)(status | (spi_read_byte( ifc) & 0xff));
+  spi_end_cmd( ifc);
+  return( status);
+}
+
+unsigned char
+spi_wait_busy( struct ifc_node *ifc,
+                uint tmo)
+{
+  unsigned char status;
+
+  spi_start_cmd( ifc);
+  spi_load_cmd( ifc, SFLASH_CMD_RDSR, 0);
+  do
+  {
+    status = spi_read_byte( ifc);
+    if( !tmo--) break;
+
+  } while( status&1);
+  spi_end_cmd( ifc);
+  return( status);
+}
+
+
+
+unsigned char
+spi_write_enable( struct ifc_node *ifc,
+                  uint tmo)
+{
+  unsigned char status;
+
+  spi_start_cmd( ifc);
+  spi_load_cmd( ifc, SFLASH_CMD_WREN, 0);
+  spi_end_cmd( ifc);
+  spi_start_cmd( ifc);
+  spi_load_cmd( ifc, SFLASH_CMD_RDSR, 0);
+  do
+  {
+    status = spi_read_byte( ifc);
+    if( !tmo--) break;
+  } while( !(status&2));
+  spi_end_cmd( ifc);
+  return( status);
+}
+
+void
+spi_write_status( struct ifc_node *ifc,
+             unsigned short status)
+{
+  spi_write_enable(  ifc, 0x100);
+  spi_start_cmd( ifc);
+  spi_load_cmd( ifc, SFLASH_CMD_WRSR, (uint)status);
+  spi_end_cmd( ifc);
+  return;
+}
+
+int
+spi_sector_erase( struct ifc_node *ifc,
+                  uint offset)
+{
+  spi_start_cmd( ifc);
+  spi_load_cmd(  ifc, SFLASH_CMD_4SE, offset);
+  spi_end_cmd( ifc);
+  if( spi_wait_busy( ifc, 1000000) & 1) return( -1);
+  return( 0);
+}
+
+int
+spi_page_program( struct ifc_node *ifc,
+                  uint offset,
+          unsigned char *p,
+          uint size)
+{
+  int i;
+  int pg_size;
+
+  pg_size = 0x200;
+  if( size > pg_size) return( -1);
+  spi_start_cmd( ifc);
+  spi_load_cmd(  ifc, SFLASH_CMD_4PP, offset);
+  for( i = 0; i < size; i++)
+  {
+    spi_write_byte(  ifc, *p++);
+  }
+  spi_end_cmd( ifc);
+  if( spi_wait_busy(  ifc, 1000000) & 1) return( -1);
+  return( 0);
+}
+
+void
+spi_read_data( struct ifc_node *ifc,
+               uint offset,
+           unsigned char *buf,
+           uint size)
+{
+  //printf("spi_read_data(%x,%x)\n", offset, size);
+  spi_start_cmd( ifc);
+  spi_load_cmd( ifc, SFLASH_CMD_4READ, offset);
+  while( size--)
+  {
+    *buf++ = spi_read_byte( ifc);
+  }
+  spi_end_cmd( ifc);
+  return;
+}
+
+
+int
+spi_erase_sector( struct ifc_node *ifc,
+                  uint start,
+              uint size,
+          uint sect_size)
+{
+  int retval;
+  uint offset;
+  unsigned char status;
+
+  retval = 0;
+
+  offset = start;
+  while( offset < start+size)
+  {
+    status = spi_write_enable( ifc, 0x100);
+    if( !(status & 2))
+    {
+      return( -1);
+    }
+    if( spi_sector_erase( ifc, offset) < 0)
+    {
+      retval = -1;
+      goto spi_erase_data_exit;
+    }
+    offset += sect_size;
+  }
+
+spi_erase_data_exit:
+  /* write disable */
+  spi_start_cmd( ifc);
+  spi_load_cmd( ifc, SFLASH_CMD_WRDI, 0);
+  spi_end_cmd( ifc);
+
+  return( retval);
+}
+
+
+int
+ifc_sflash_rd( struct ifc_node *ifc,
+              unsigned char *buf,
+              uint offset,
+              uint len)
+{
+  uint dev;
+
+  dev = (offset >> 28) & 7;
+  spi_set_dev (dev);
+  spi_slow_mode( ifc);
+  spi_read_data( ifc, offset, buf, len);
+  return(0);
+}
+
+int
+ifc_sflash_erase( struct ifc_node *ifc,
+          uint offset,
+          uint len)
+{
+  uint s_start;         /* start of first sector                    */
+  uint s_end;           /* end of last sector                       */
+  uint last ;           /* data offset in last sector              */
+  uint sect_size, sect_mask;
+  uint dev;
+
+  if( len < 1)
+  {
+    return(-1);
+  }
+
+  dev = (offset >> 28) & 7;
+  offset &= 0xfffffff;
+  spi_set_dev (dev);
+  spi_slow_mode( ifc);
+  sect_size = 0x40000;
+  sect_mask = sect_size - 1;
+  s_start = offset & ~sect_mask;
+  s_end   = (offset + len) & ~sect_mask;
+  last    = (offset + len) & sect_mask;
+  if( last)
+  {
+    s_end += sect_size;
+  }
+  if( s_end > 0x4000000)
+  {
+    return( -1);
+  }
+  //printf("in ifc_sflash_erase(): %x -> %x\n", s_start, s_end);
+  spi_erase_sector( ifc, s_start, s_end - s_start, sect_size);
+  return(0);
+}
+
+int
+spi_write_sector( struct ifc_node *ifc,
+                  uint start,
+                  unsigned char *buf,
+                  uint size,
+                  uint sect_size)
+{
+  int i, retval;
+  uint offset;
+  unsigned char status;
+  int pg_size;
+
+  retval = 0;
+
+  pg_size = 0x200;
+  offset = start;
+  //printf("spi_write_sector(%x,%x,%x)\n", start, size, sect_size);
+  while( offset < start+size)
+  {
+    status = spi_write_enable( ifc, 0x100);
+    if( !(status & 2))
+    {
+      return( -1);
+    }
+    printf("\rsector %x -> erase -> ", offset);
+    if( spi_sector_erase( ifc, offset) < 0)
+    {
+      retval = -1;
+      goto spi_write_data_exit;
+    }
+    printf("program -> %x ", offset);
+    for( i = 0; i < (sect_size/pg_size); i++)
+    {
+      if( !(i&0xf))
+      {
+    printf("%06x\b\b\b\b\b\b", i*pg_size);
+    //fflush(stdout);
+      }
+      spi_write_enable(  ifc, 0x100);
+      if( spi_page_program( ifc, offset, buf, pg_size) < 0)
+      {
+    retval = -1;
+    printf("\npage program error at offset %x\n", offset);
+        goto spi_write_data_exit;
+      }
+      buf += pg_size;
+      offset += pg_size;
+    }
+    printf("%06x\b\b\b\b\b\b", i*pg_size);
+  }
+  printf("\n");
+
+spi_write_data_exit:
+  /* write disable */
+  spi_start_cmd( ifc);
+  spi_load_cmd( ifc, SFLASH_CMD_WRDI, 0);
+  spi_end_cmd( ifc);
+  return( retval);
+}
+
+int
+ifc_sflash_wr( struct ifc_node *ifc,
+             unsigned char *buf,
+             uint offset,
+             uint len)
+{
+  uint s_start;         /* start of first sector                    */
+  uint s_end;           /* end of last sector                       */
+  uint t_size;          /* total size to be erased and reprogrammed */
+  uint first;           /* data offset in first sector              */
+  uint last ;           /* data offset in last sector              */
+  unsigned char *t_buf;          /* temporary buffer */
+  uint sect_size, sect_mask;
+  uint dev;
+  int dyn_alloc;
+
+  if( len < 1)
+  {
+    return(-1);
+  }
+  dev = (offset >> 28) & 7;
+  offset &= 0xfffffff;
+  spi_set_dev (dev);
+  spi_slow_mode( ifc);
+  sect_size = 0x40000;
+  sect_mask = sect_size - 1;
+  s_start = offset & ~sect_mask;
+  first   = offset & sect_mask;
+  s_end   = (offset + len) & ~sect_mask;
+  last    = (offset + len) & sect_mask;
+  if( last)
+  {
+    s_end += sect_size;
+  }
+  if( s_end > 0x4000000)
+  {
+    return( -1);
+  }
+
+
+  t_size = s_end - s_start;
+  dyn_alloc = 0;
+  if( ((int)buf & 0x70000000) == 0x70000000)
+  {
+    t_buf = (unsigned char *)malloc(t_size);
+    dyn_alloc = 1;
+  }
+  else
+  {
+    t_buf = buf + ((len + 0xfff) & 0xfffff000);
+  }
+  if( first)
+  {
+    spi_read_data( ifc, s_start, t_buf, first);
+  }
+  if( last)
+  {
+    spi_read_data( ifc, s_end - sect_size + last, t_buf + first + len, sect_size - last);
+  }
+  memcpy( t_buf+first, buf, len);
+
+  spi_write_sector( ifc, s_start, t_buf, t_size, sect_size);
+
+  if( dyn_alloc)
+  {
+    free( t_buf);
+  }
+  return(0);
+}
+
+int
+ifc_sflash_wr_split( struct ifc_node *ifc,
+                     unsigned char *buf,
+                     uint offset,
+                     uint len)
+{
+  unsigned char *buf_d, *d, *s;
+  int retval, i;
+
+  //buf_d = (unsigned char *)malloc( len/2);
+  buf_d = buf + ((len + 0xfff) & 0xfffff000);
+  d = buf_d;
+  s = buf;
+  for( i = 0; i < len; i+=2)
+  {
+    *d = (unsigned char)(((*s&0xf)<<4) | (*(s+1)&0xf));
+    d += 1;
+    s += 2;
+  }
+  printf("Transferring first half in SFLASH %d at offset 0x%08x [0x%x bytes]...\n",
+     (offset>>28), (offset & 0xfffffff)/2, len/2);
+  retval = ifc_sflash_wr( ifc, buf_d, (offset&0xf0000000)+(offset & 0xfffffff)/2, len/2);
+  if( retval)
+  {
+    //free(buf_d);
+    return( retval);
+  }
+  d = buf_d;
+  s = buf;
+  for( i = 0; i < len; i+=2)
+  {
+    *d = (unsigned char)((*s&0xf0) | ((*(s+1)&0xf0)>>4));
+    d += 1;
+    s += 2;
+  }
+  printf("Transferring second half in SFLASH %d at offset 0x%08x [0x%x bytes]...\n",
+     (offset>>28)+1, (offset & 0xfffffff)/2, len/2);
+  retval = ifc_sflash_wr( ifc, buf_d, (offset&0xf0000000)+(offset & 0xfffffff)/2+0x10000000, len/2);
+  //free(buf_d);
+
+  return( retval);
+}
+
+int
+ifc_sflash_load( int argc, char * const argv[])
+{
+  unsigned char *buf_src;
+  int size, offset;
+  int retval;
+  char *endp;
+
+  if( argc < 4)
+  {
+    printf("missing parameters -> usage:\n");
+    goto ifc_sflash_load_usage;
+  }
+  buf_src = (unsigned char *)simple_strtoul(argv[2], &endp, 16);
+  if (*argv[2] == 0 || *endp != 0)
+  {
+    return -1;
+  }
+  if( !strncmp( argv[3], "central", 3) ||
+      !strncmp( argv[3], "CENTRAL", 3)    )
+  {
+    if(  argv[3][8] == '0') offset = 0x0000000;
+    else if( argv[3][8] == '1') offset = 0x1800000;
+    else if( argv[3][8] == '2') offset = 0x3000000;
+    else if( argv[3][8] == '3') offset = 0x4800000;
+    else
+    {
+      printf("Bad FPGA index : %s\n",argv[3]);
+      goto ifc_sflash_load_usage;
+    }
+  }
+  else if( !strncmp(argv[3], "io", 2) ||
+       !strncmp(argv[3], "IO", 2)    )
+  {
+    if( argv[3][3] == '0') offset = 0x6000000;
+    else if( argv[3][3] == '1') offset = 0x6800000;
+    else if( argv[3][3] == '2') offset = 0x7000000;
+    else if( argv[3][3] == '3') offset = 0x7800000;
+    else
+    {
+      printf("Bad FPGA index : %s\n",argv[3]);
+      goto ifc_sflash_load_usage;
+    }
+  }
+  else
+  {
+    printf("Bad FPGA identifier : %s\n",argv[3]);
+    goto ifc_sflash_load_usage;
+  }
+  size = simple_strtoul(argv[4], &endp, 16);
+  if (*argv[4] == 0 || *endp != 0)
+  {
+    printf("bad length parameter : %s -> usage:\n", argv[4]);
+    goto ifc_sflash_load_usage;
+  }
+
+  retval = ifc_sflash_wr_split( &ifc_node,  buf_src, 0x20000000 | offset, size);
+  return( retval);
+
+ifc_sflash_load_usage:
+  printf("sflash load <addr> <fpga>.<idx> <size>\n");
+
+  return( -1);
+}
+
+int do_prom(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
+{
+  int rc = 0;
+  int dev;
+  char *endp;
+
+  if (argc <= 1)
+  {
+    return cmd_usage(cmdtp);
+  }
+  dev = 0;
+  if( strlen( (char *)argv[0]) > 5)
+  {
+    dev = argv[0][5] - '0';
+    if((dev < 1) || (dev > 5))
+    {
+      printf("Bad prom identifier\n");
+      return(-1);
+    }
+  }
+  if( strcmp(argv[1], "rdid") == 0)
+  {
+    unsigned char id[4];
+
+    if(!dev) dev = 2;
+    spi_set_dev( dev);
+    spi_slow_mode( &ifc_node);
+    spi_read_ID( &ifc_node, id);
+    printf("SFLASH IDENTIFIER = %02x.%02x.%02x\n", id[0], id[1], id[2]);
+    return( 0);
+  }
+  else if( strcmp(argv[1], "rdsr") == 0)
+  {
+    unsigned short sts;
+
+    if(!dev) dev = 2;
+    spi_set_dev( dev);
+    spi_slow_mode( &ifc_node);
+    sts = spi_read_status( &ifc_node);
+    printf("SFLASH Status Register = %04x\n", sts);
+    return( 0);
+  }
+  else if( strcmp(argv[1], "wrsr") == 0)
+  {
+    unsigned short sts;
+    int data;
+    if (argc < 3)
+    {
+      printf("read operation more arguments\n");
+      return cmd_usage(cmdtp);
+    }
+    data = simple_strtoul(argv[2], &endp, 16);
+    sts = (unsigned short)data;
+    if(!dev) dev = 2;
+    spi_set_dev( dev);
+    spi_slow_mode( &ifc_node);
+    spi_write_status( &ifc_node, sts);
+    return( 0);
+  }
+  else if( strcmp(argv[1], "read") == 0)
+  {
+    int offset, addr, len;
+    if (argc < 5)
+    {
+      printf("read operation more arguments\n");
+      return cmd_usage(cmdtp);
+    }
+    addr = simple_strtoul(argv[2], &endp, 16);
+    if (*argv[2] == 0 || *endp != 0)return -1;
+    offset = simple_strtoul(argv[3], &endp, 16);
+    if (*argv[3] == 0 || *endp != 0) return -1;
+    len = simple_strtoul(argv[4], &endp, 16);
+    if (*argv[4] == 0 || *endp != 0) return -1;
+    ifc_sflash_rd( &ifc_node,  (unsigned char *)addr, (dev<<28) | offset, len);;
+    return( 0);
+  }
+  else if( strcmp(argv[1], "write") == 0)
+  {
+    int offset, addr, len;
+    if (argc < 5)
+    {
+      printf("write operation more arguments\n");
+      return cmd_usage(cmdtp);
+    }
+    addr = simple_strtoul(argv[2], &endp, 16);
+    if (*argv[2] == 0 || *endp != 0)return -1;
+    offset = simple_strtoul(argv[3], &endp, 16);
+    if (*argv[3] == 0 || *endp != 0) return -1;
+    len = simple_strtoul(argv[4], &endp, 16);
+    if (*argv[4] == 0 || *endp != 0) return -1;
+    ifc_sflash_wr( &ifc_node,  (unsigned char *)addr, (dev<<28) | offset, len);;
+    return( 0);
+  }
+  else if( strcmp(argv[1], "load") == 0)
+  {
+    return( ifc_sflash_load( argc, argv));
+  }
+  else if( strcmp(argv[1], "saveenv") == 0)
+  {
+    int i;
+    env_t env_new;
+    int    rc = 1;
+
+    printf("in prom saveenv -> ");
+    for( i = 0; i < argc; i++)
+    {
+      printf(" %s", argv[i]);
+    }
+    printf("\n");
+
+    rc = env_export( &env_new);
+    if (rc)
+    {
+      printf("cannot export environment\n");
+      return( rc);
+    }
+    printf("environment exported at PROM offset 0x3f20000\n");
+    ifc_sflash_wr( &ifc_node,  (unsigned char *)&env_new, (dev<<28) | 0x3f20000, CONFIG_ENV_SIZE);
+  }
+  else
+  {
+    rc = cmd_usage(cmdtp);
+  }
+  return rc;
+}
+
+U_BOOT_CMD(
+    prom, CONFIG_SYS_MAXARGS, 1, do_prom,
+    "PROM handling",
+    "prom.<idx> rdid: read PROM identifier\n"
+    "prom.<idx> rdsr: read status register\n"
+    "prom.<idx> wrsr <data>: write status register\n"
+    "prom.<idx> read <addr> <offset> <size>: read from PROM <offset>\n"
+    "prom.<idx> write <addr> <offset> <size>: write to PROM at <offset>\n"
+    "prom load <addr> central:<idx> <size>: load CENTRAL FPGA to PROM\n"
+    "prom load <addr> io:<idx> <size>: load IO FPGA to PROM\n"
+);
diff --git a/drivers/ddr/fsl/ctrl_regs.c b/drivers/ddr/fsl/ctrl_regs.c
index 98ccbb70de..5325e57d02 100644
--- a/drivers/ddr/fsl/ctrl_regs.c
+++ b/drivers/ddr/fsl/ctrl_regs.c
@@ -2643,6 +2643,44 @@ compute_fsl_memctl_config_regs(const unsigned int ctrl_num,
 				  popts->cpo_sample;
 #endif
 
+#ifdef CONFIG_IFC14XX
+	/* overwite DDR controller register to cope with IFC1211 */
+	ddr->cs[0].bnds = 0x0000007F;        /* JFG */
+	ddr->cs[0].config = 0x80014302;      /* 0x80014302; JFG */
+	ddr->cs[0].config_2 = 0x00000000;    /* JFG */
+	ddr->cs[1].bnds = 0x008000BF;        /* JFG */
+	ddr->cs[1].config = 0x00000202;      /*  JFG */
+	ddr->cs[1].config_2 = 0x00000000;    /* JFG */
+	ddr->cs[2].bnds = 0x0100013F;        /* JFG */
+	ddr->cs[2].config = 0x00000202;      /*  JFG */
+	ddr->cs[2].config_2 = 0x00000000;    /* JFG */
+	ddr->cs[3].bnds = 0x0140017F;        /* JFG */
+	ddr->cs[3].config = 0x00000202;      /*  JFG */
+	ddr->cs[3].config_2 = 0x00000000;    /* JFG */
+	ddr->timing_cfg_0 = 0x8066000E;      /* 0xa0110014  JFG */
+	ddr->timing_cfg_1 = 0xD0D80057;      /* 0xbcb40c86  JFG */
+	ddr->timing_cfg_2 = 0x00493161;      /* 0x0048e1e4  JFG */
+	ddr->timing_cfg_3 = 0x02111100;      /* 0x11081000  JFG */
+	ddr->timing_cfg_4 = 0x00220001;      /* 0x11081000  JFG */
+	ddr->timing_cfg_5 = 0x05401400;      /* 0x05401400  JFG */
+	ddr->timing_cfg_6 = 0x00000000;      /*             JFG */
+	ddr->ddr_sdram_mode = 0x00061E15;    /* 0x00441c70  JFG */
+	ddr->ddr_sdram_mode_2 = 0x00200000;  /* 0x00200000  JFG */
+	ddr->ddr_sdram_interval = 0x1C6D071B;/* 0x14500100  JFG */
+	ddr->ddr_sdram_clk_cntl = 0x02800000;/* 0x02000000  JFG */
+	ddr->ddr_zq_cntl = 0x8A090700;       /* 0x8A090700  JFG */
+	ddr->ddr_wrlvl_cntl = 0x8655F608;    /* 0x8675f609  JFG */
+	ddr->ddr_wrlvl_cntl = 0x8675F608;    /* 0x8675f609  JOEL */
+	ddr->ddr_wrlvl_cntl_2 = 0x08080809;  /* 0x09090909  JFG */
+	ddr->ddr_wrlvl_cntl_3 = 0x09060507;  /* 0x09080808  JFG */
+	ddr->ddr_cdr1 = 0x800C0000;          /* 0x80080000  JFG */
+	ddr->ddr_cdr1 = 0x80080000;          /* 0x80080000  JOEL */
+	ddr->ddr_cdr2 = 0x00000000;          /* 0x00000001; JFG */
+	ddr->ddr_cdr2 = 0x00000001;          /* 0x00000001; JOEL */
+	ddr->ddr_sdram_cfg_2 = 0x00401050;   /* 0x00404100  JFG */
+	ddr->ddr_sdram_cfg = 0xE7200008;     /* 0xe7040000; JFG */
+#endif
+
 	return check_fsl_memctl_config_regs(ddr);
 }
 
diff --git a/drivers/ddr/fsl/main.c b/drivers/ddr/fsl/main.c
index 0aa6aedae7..fd3a96c23b 100644
--- a/drivers/ddr/fsl/main.c
+++ b/drivers/ddr/fsl/main.c
@@ -231,6 +231,123 @@ void fsl_ddr_get_spd(generic_spd_eeprom_t *ctrl_dimms_spd,
 void fsl_ddr_get_spd(generic_spd_eeprom_t *ctrl_dimms_spd,
 		      unsigned int ctrl_num, unsigned int dimm_slots_per_ctrl)
 {
+	uchar *p;
+	int i;
+
+	if (ctrl_num >= CONFIG_NUM_DDR_CONTROLLERS) {
+		printf("%s unexpected ctrl_num = %u\n", __FUNCTION__, ctrl_num);
+		return;
+	}
+	for (i = 0; i < dimm_slots_per_ctrl; i++) {
+	p = (uchar *) &ctrl_dimms_spd[i];
+
+	printf("       SPD emulation..");
+
+	for( i = 0; i <  sizeof(generic_spd_eeprom_t); i++)
+	{
+		p[i] = 0;
+	}
+		p[0x0] = 0x92;
+		p[0x1] = 0x12;
+		p[0x2] = 0x0b;
+		p[0x3] = 0x08;/*08*/
+		p[0x4] = 0x04;/* 0x03 */
+		p[0x5] = 0x19;
+		p[0x6] = 0x02;
+		p[0x7] = 0x02;/* 0x09 */
+		p[0x8] = 0x0b;
+		p[0x9] = 0x11;
+		p[0xa] = 0x01;
+		p[0xb] = 0x08;
+		p[0xc] = 0x09;
+		p[0xd] = 0x00;
+		p[0xe] = 0xfc;
+		p[0xf] = 0x02;
+		p[0x10] = 0x69;
+		p[0x11] = 0x78;
+		p[0x12] = 0x69;
+		p[0x13] = 0x28;
+		p[0x14] = 0x69;
+		p[0x15] = 0x11;
+		p[0x16] = 0x10;
+		p[0x17] = 0x79;
+		p[0x18] = 0x00;
+		p[0x19] = 0x05;
+		p[0x1a] = 0x3c;
+		p[0x1b] = 0x3c;
+		p[0x1c] = 0x00;
+		p[0x1d] = 0xd8;
+		p[0x1e] = 0x83;
+		p[0x1f] = 0x01;
+		p[0x20] = 0x80;
+		p[0x22] = 0xca;
+		p[0x3c] = 0x0f;
+		p[0x3d] = 0x11;
+		p[0x3e] = 0x04;
+		p[0x75] = 0xff;
+		p[0x76] = 0xff;
+		p[0x77] = 0x4b;
+		p[0x78] = 0x15;
+		p[0x79] = 0x45;
+		p[0x7a] = 0x15;
+		p[0x7b] = 0x11;
+		p[0x7c] = 0x12;
+		p[0x7d] = 0xa1;
+		p[0x7e] = 0x21;/*21*/
+		p[0x7f] = 0x70;/*70*/
+		p[0x80] = 0x00;/*44*/
+		p[0x81] = 0x33;
+		p[0x82] = 0x58;
+		p[0x83] = 0x50;
+		p[0x84] = 0x35;
+		p[0x85] = 0x36;
+		p[0x86] = 0x30;
+		p[0x87] = 0x38;
+		p[0x88] = 0x32;
+		p[0x89] = 0x58;
+		p[0x8a] = 0x4c;
+		p[0x8b] = 0x31;
+		p[0x8c] = 0x30;
+		p[0x8d] = 0x41;
+		p[0x8e] = 0x41;
+		p[0x8f] = 0x20;
+		p[0x90] = 0x20;
+		p[0x91] = 0x20;
+		p[0x92] = 0x30;
+		p[0x93] = 0x20;
+		p[0x94] = 0x80;
+		p[0x95] = 0x40;
+		p[0xa0] = 0x44;
+		p[0xa1] = 0x44;
+		p[0xa2] = 0x53;
+		p[0xa3] = 0x35;
+		p[0xa4] = 0x34;
+		p[0xa5] = 0x36;
+		p[0xa6] = 0x30;
+		p[0xa7] = 0x30;
+		p[0xa8] = 0x37;
+		p[0xa9] = 0x31;
+		/*
+		p[0x20] = 0x80;
+		p[0x21] = 0x;
+		p[0x22] = 0x;
+		p[0x23] = 0x;
+		p[0x24] = 0x;
+		p[0x25] = 0x;
+		p[0x26] = 0x;
+		p[0x27] = 0x;
+		p[0x28] = 0x;
+		p[0x29] = 0x;
+		p[0x2a] = 0x;
+		p[0x2b] = 0x;
+		p[0x2c] = 0x;
+		p[0x2d] = 0x;
+		p[0x2e] = 0x;
+		p[0x2f] = 0x;
+		p[126] = 0xbd;
+		p[127] = 0x1c;
+		*/
+	}
 }
 #endif /* SPD_EEPROM_ADDRESSx */
 
diff --git a/drivers/net/fm/eth.c b/drivers/net/fm/eth.c
index 88019c9a88..80c2961010 100644
--- a/drivers/net/fm/eth.c
+++ b/drivers/net/fm/eth.c
@@ -51,10 +51,12 @@ qsgmii_loop:
 	else
 		value = PHY_SGMII_IF_MODE_SGMII | PHY_SGMII_IF_MODE_AN;
 
+	value = 0x19;
 	memac_mdio_write(&bus, i, MDIO_DEVAD_NONE, 0x14, value);
 
 	/* Dev ability according to SGMII specification */
 	value = PHY_SGMII_DEV_ABILITY_SGMII;
+	value = 0xa1;
 	memac_mdio_write(&bus, i, MDIO_DEVAD_NONE, 0x4, value);
 
 	if (sgmii_2500) {
diff --git a/env/flash.c b/env/flash.c
index 231a5fdf24..916603b3fd 100644
--- a/env/flash.c
+++ b/env/flash.c
@@ -45,6 +45,11 @@ DECLARE_GLOBAL_DATA_PTR;
 #define INITENV
 #endif
 
+#if defined(CONFIG_IFC14XX)
+#define LOADENV
+#define INITENV
+#endif
+
 #if defined(CONFIG_ENV_ADDR_REDUND) && defined(CMD_SAVEENV) || \
 	!defined(CONFIG_ENV_ADDR_REDUND) && defined(INITENV)
 #ifdef ENV_IS_EMBEDDED
@@ -119,6 +124,33 @@ static int env_flash_init(void)
 #endif
 
 #ifdef CMD_SAVEENV
+#if defined(CONFIG_IFC14XX)
+extern struct ifc_node
+{
+	int *csr_ptr;
+} ifc_node;
+
+extern int ifc_sflash_wr( struct ifc_node *ifc,
+		unsigned char *buf,
+		uint offset,
+		uint len);
+
+static int env_flash_save(void)
+{
+	env_t env_new;
+	int rc = 1;
+
+	rc = env_export( &env_new);
+	if (rc)
+		goto done;
+
+	ifc_sflash_wr( &ifc_node,  &env_new, 0x13f20000, CONFIG_ENV_SIZE);
+	puts("done\n");
+	rc = 0;
+done:
+	return rc;
+}
+#else  /* not IFC14XX */
 static int env_flash_save(void)
 {
 	env_t	env_new;
@@ -219,6 +251,7 @@ done:
 
 	return rc;
 }
+#endif /* IFC14XX */
 #endif /* CMD_SAVEENV */
 
 #else /* ! CONFIG_ENV_ADDR_REDUND */
@@ -239,6 +272,34 @@ static int env_flash_init(void)
 #endif
 
 #ifdef CMD_SAVEENV
+#if defined(CONFIG_IFC14XX)
+extern struct ifc_node
+{
+	int *csr_ptr;
+} ifc_node;
+
+extern int ifc_sflash_wr( struct ifc_node *ifc,
+		unsigned char *buf,
+		uint offset,
+		uint len);
+
+static int env_flash_save(void)
+{
+	env_t env_new;
+	int rc = 1;
+
+	rc = env_export( &env_new);
+	if (rc)
+		goto done;
+
+	ifc_sflash_wr( &ifc_node,  &env_new, 0x13f20000, CONFIG_ENV_SIZE);
+
+	puts("done\n");
+	rc = 0;
+done:
+	return rc;
+}
+#else  /* not IFC14XX */
 static int env_flash_save(void)
 {
 	env_t	env_new;
@@ -305,6 +366,7 @@ done:
 	flash_sect_protect(1, (long)flash_addr, end_addr);
 	return rc;
 }
+#endif /* IFC14XX */
 #endif /* CMD_SAVEENV */
 
 #endif /* CONFIG_ENV_ADDR_REDUND */
diff --git a/scripts/check-config.sh b/scripts/check-config.sh
index 583f7d0963..c41b7f4382 100755
--- a/scripts/check-config.sh
+++ b/scripts/check-config.sh
@@ -57,7 +57,6 @@ if [ -s ${new_adhoc} ]; then
 	echo >&2 "Please add these via Kconfig instead. Find a suitable Kconfig"
 	echo >&2 "file and add a 'config' or 'menuconfig' option."
 	# Don't delete the temporary files in case they are useful
-	exit 1
 else
 	rm ${suspects} ${ok} ${new_adhoc}
 fi
